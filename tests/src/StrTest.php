<?php declare(strict_types=1);

namespace Tests\Kirameki\Text;

use Kirameki\Core\Testing\TestCase;
use Kirameki\Text\Exceptions\NotFoundException;
use Kirameki\Text\Str;
use Kirameki\Text\Unicode;

class StrTest extends TestCase
{
    public function test_after(): void
    {
        // match first
        $this->assertSame('est', Str::after('test', 't'));

        // match last
        $this->assertSame('', Str::after('test1', '1'));

        // match empty string
        $this->assertSame('test', Str::after('test', ''));

        // no match
        $this->assertSame('test', Str::after('test', 'a'));

        // multi byte
        $this->assertSame('„ÅÜ„Åà', Str::after('„ÅÇ„ÅÇ„ÅÑ„ÅÜ„Åà', '„ÅÑ'));

        // grapheme
        $this->assertSame('def', Str::after('abcüè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åødef', 'üè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åø'));

        // grapheme cluster
        $this->assertSame('üèø', Str::after('üëãüèø', 'üëã'));
    }

    public function test_afterLast(): void
    {
        // match first (single occurrence)
        $this->assertSame('bc', Str::afterLast('abc', 'a'));

        // match first (multiple occurrence)
        $this->assertSame('1', Str::afterLast('test1', 't'));

        // match last
        $this->assertSame('', Str::afterLast('test1', '1'));

        // should match the last string
        $this->assertSame('Foo', Str::afterLast('----Foo', '---'));

        // match empty string
        $this->assertSame('test', Str::afterLast('test', ''));

        // no match
        $this->assertSame('test', Str::afterLast('test', 'a'));

        // multi byte
        $this->assertSame('„Åà', Str::afterLast('„ÅÇ„ÅÇ„ÅÑ„ÅÜ„ÅÑ„Åà', '„ÅÑ'));

        // grapheme
        $this->assertSame('üè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åøf', Str::afterLast('abcüè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åødüè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åøeüè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åøf', 'e'));

        // grapheme cluster
        $this->assertSame('üèø', Str::afterLast('üëãüèø', 'üëã'));
    }

    public function test_before(): void
    {
        // match first (single occurrence)
        $this->assertSame('a', Str::before('abc', 'b'));

        // match first (multiple occurrence)
        $this->assertSame('a', Str::before('abc-abc', 'b'));

        // match last
        $this->assertSame('test', Str::before('test1', '1'));

        // match multiple chars
        $this->assertSame('test', Str::before('test123', '12'));

        // match empty string
        $this->assertSame('test', Str::before('test', ''));

        // no match
        $this->assertSame('test', Str::before('test', 'a'));

        // multi byte
        $this->assertSame('„ÅÇ„ÅÇ', Str::before('„ÅÇ„ÅÇ„ÅÑ„ÅÜ„ÅÑ„Åà', '„ÅÑ'));

        // grapheme
        $this->assertSame('abc', Str::before('abcüè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åødüè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åøeüè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åøf', 'üè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åø'));
        $this->assertSame('abcüè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åødüè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åø', Str::before('abcüè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åødüè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åøeüè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åøf', 'e'));

        // grapheme cluster
        $this->assertSame('üëã', Str::before('üëãüèø', 'üèø'));
    }

    public function test_beforeLast(): void
    {
        // match first (single occurrence)
        $this->assertSame('a', Str::beforeLast('abc', 'b'));

        // match first (multiple occurrence)
        $this->assertSame('abc-a', Str::beforeLast('abc-abc', 'b'));

        // match last
        $this->assertSame('test', Str::beforeLast('test1', '1'));

        // match empty string
        $this->assertSame('test', Str::beforeLast('test', ''));

        // no match
        $this->assertSame('test', Str::beforeLast('test', 'a'));

        // multi byte
        $this->assertSame('„ÅÇ„ÅÇ„ÅÑ„ÅÜ', Str::beforeLast('„ÅÇ„ÅÇ„ÅÑ„ÅÜ„ÅÑ„Åà', '„ÅÑ'));

        // grapheme
        $this->assertSame('abcüè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åødüè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åøe', Str::beforeLast('abcüè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åødüè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åøeüè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åøf', 'üè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åø'));

        // grapheme cluster
        $this->assertSame('üëã', Str::beforeLast('üëãüèø', 'üèø'));
    }

    public function test_between(): void
    {
        // basic
        $this->assertSame('1', Str::between('test(1)', '(', ')'));

        // edge
        $this->assertSame('', Str::between('()', '(', ')'));
        $this->assertSame('1', Str::between('(1)', '(', ')'));

        // missing from
        $this->assertSame('test)', Str::between('test)', '(', ')'));

        // missing to
        $this->assertSame('test(', Str::between('test(', '(', ')'));

        // nested
        $this->assertSame('test(1', Str::between('(test(1))', '(', ')'));
        $this->assertSame('1', Str::between('(1) to (2)', '(', ')'));

        // multi char
        $this->assertSame('_ab_', Str::between('ab_ab_ba_ba', 'ab', 'ba'));

        // utf8
        $this->assertSame('„ÅÑ', Str::between('„ÅÇ„ÅÑ„ÅÜ„ÅÑ„ÅÜ', '„ÅÇ', '„ÅÜ'));

        // grapheme
        $this->assertSame('üòÉ', Str::between('üëãüèøüòÉüëãüèøüòÉüëãüèø', 'üëãüèø', 'üëãüèø'));

        // grapheme between codepoints
        $this->assertSame('', Str::between('üëãüèø', 'üëã', 'üèø'));
    }

    public function test_between_empty_from(): void
    {
        $this->expectExceptionMessage('$from must not be empty.');
        Str::between('test)', '', ')');
    }

    public function test_between_empty_to(): void
    {
        $this->expectExceptionMessage('$to must not be empty.');
        Str::between('test)', '(', '');
    }

    public function test_between_empty_from_and_to(): void
    {
        $this->expectExceptionMessage('$from must not be empty.');
        Str::between('test)', '', '');
    }

    public function test_betweenFurthest(): void
    {
        // basic
        $this->assertSame('1', Str::betweenFurthest('test(1)', '(', ')'));

        // edge
        $this->assertSame('', Str::betweenFurthest('()', '(', ')'));
        $this->assertSame('1', Str::betweenFurthest('(1)', '(', ')'));

        // missing from
        $this->assertSame('test)', Str::betweenFurthest('test)', '(', ')'));

        // missing to
        $this->assertSame('test(', Str::betweenFurthest('test(', '(', ')'));

        // nested
        $this->assertSame('test(1)', Str::betweenFurthest('(test(1))', '(', ')'));
        $this->assertSame('1) to (2', Str::betweenFurthest('(1) to (2)', '(', ')'));

        // multichar
        $this->assertSame('_', Str::betweenFurthest('ab_ba', 'ab', 'ba'));

        // utf8
        $this->assertSame('„ÅÑ', Str::betweenFurthest('„ÅÇ„ÅÑ„ÅÜ', '„ÅÇ', '„ÅÜ'));

        // grapheme
        $this->assertSame('üòÉ', Str::betweenFurthest('üëãüèøüòÉüëãüèøüòÉ', 'üëãüèø', 'üëãüèø'));

        // grapheme between codepoints
        $this->assertSame('', Str::between('üëãüèø', 'üëã', 'üèø'));
    }

    public function test_betweenFurthest_empty_from(): void
    {
        $this->expectExceptionMessage('$from must not be empty.');
        Str::betweenFurthest('test)', '', ')');
    }

    public function test_betweenFurthest_empty_to(): void
    {
        $this->expectExceptionMessage('$to must not be empty.');
        Str::betweenFurthest('test)', '(', '');
    }

    public function test_betweenFurthest_empty_from_and_to(): void
    {
        $this->expectExceptionMessage('$from must not be empty.');
        Str::betweenFurthest('test)', '', '');
    }

    public function test_betweenLast(): void
    {
        // basic
        $this->assertSame('1', Str::betweenLast('test(1)', '(', ')'));

        // edge
        $this->assertSame('', Str::betweenLast('()', '(', ')'));
        $this->assertSame('1', Str::betweenLast('(1)', '(', ')'));

        // missing from
        $this->assertSame('test)', Str::between('test)', '(', ')'));

        // missing to
        $this->assertSame('test(', Str::between('test(', '(', ')'));

        // nested
        $this->assertSame('1)', Str::betweenLast('(test(1))', '(', ')'));
        $this->assertSame('2', Str::betweenLast('(1) to (2)', '(', ')'));

        // multi char
        $this->assertSame('_ba_', Str::betweenLast('ab_ab_ba_ba', 'ab', 'ba'));

        // utf8
        $this->assertSame('„ÅÑ„ÅÜ„ÅÑ', Str::betweenLast('„ÅÇ„ÅÑ„ÅÜ„ÅÑ„ÅÜ', '„ÅÇ', '„ÅÜ'));

        // grapheme
        $this->assertSame('ü•π', Str::betweenLast('üëãüèøüòÉüëãüèøü•πüëã', 'üëãüèø', 'üëã'));

        // grapheme between codepoints
        $this->assertSame('', Str::between('üëãüèø', 'üëã', 'üèø'));
    }

    public function test_betweenLast_empty_from(): void
    {
        $this->expectExceptionMessage('$from must not be empty.');
        Str::betweenFurthest('test)', '', ')');
    }

    public function test_betweenLast_empty_to(): void
    {
        $this->expectExceptionMessage('$to must not be empty.');
        Str::betweenFurthest('test)', '(', '');
    }

    public function test_betweenLast_empty_from_and_to(): void
    {
        $this->expectExceptionMessage('$from must not be empty.');
        Str::betweenFurthest('test)', '', '');
    }

    public function test_capitalize(): void
    {
        self::assertSame('', Str::capitalize(''), 'empty');
        self::assertSame('TT', Str::capitalize('TT'), 'all uppercase');
        self::assertSame('Test', Str::capitalize('test'), 'lowercase');
        self::assertSame('Test abc', Str::capitalize('test abc'), 'lowercase with spaces');
        self::assertSame(' test abc', Str::capitalize(' test abc'), 'lowercase with spaces and leading space');
        self::assertSame('√†bc', Str::capitalize('√†bc'), 'lowercase with accent');
        self::assertSame('√©', Str::capitalize('√©'), 'lowercase with accent');
        self::assertSame('„ÇÖ', Str::capitalize('„ÇÖ'), 'lowercase with hiragana');
        self::assertSame('üè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åø', Str::capitalize('üè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åø'), 'lowercase with emoji');
    }
}
